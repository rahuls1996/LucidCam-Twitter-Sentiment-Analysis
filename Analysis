#!/usr/bin/env python
# coding: utf-8

# In[9]:


import re
import tweepy
from tweepy import OAuthHandler
from textblob import TextBlob


# In[38]:


class TwitterClient(object):
    def __init__(self):
        #Constructor
       
        consumer_key = 'vUgKSaXTbPYK5JxotCRR1U3uY'
        consumer_secret_key = 'WzFgdu7hmUUXj6OxA6wIgHAZerI2wdduj09T1zaZCz2fhPf25F'
        access_token = '1655510024-rIn0NeaFuvynjCMoLxkhpWrGb5Ii7mhhg9HThb0'
        access_token_secret = 'BVFPnRXoz3vM7MF3cOx0HeZQWg4sg7GwVEoHrBSc21azx'
    
        try:
            self.auth = OAuthHandler(consumer_key,consumer_secret_key)
            self.auth.set_access_token(access_token,access_token_secret)
            self.api = tweepy.API(self.auth)
        except:
            print("FAILED")
    
    def clean_tweets(self,tweet):
        return ' '.join(re.sub("(@[A-Za-z0-9]+)|([^0-9A-Za-z \t])|(\w+:\/\/\S+)", " ", tweet).split())
    
    def get_sentiment(self, tweet):
        analysis = TextBlob(self.clean_tweets(tweet)) 
        if analysis.sentiment.polarity > 0: 
            return 'positive'
        elif analysis.sentiment.polarity == 0: 
            return 'neutral'
        else: 
            return 'negative'
    def get_tweets(self, query, count = 10):
        try:
            fetched_tweets = self.api.search(q = query, count = count)
            tweets = []
            for tweet in fetched_tweets:
                parsed_tweet = {} #empty dictionary containing params of tweet
                parsed_tweet['text'] = tweet.text
                parsed_tweet['sentiment'] = self.get_sentiment(tweet.text)
                print(parsed_tweet)
                if tweet.retweet_count > 0: 
                    # if tweet has retweets, ensure that it is appended only once 
                    if parsed_tweet not in tweets: 
                        tweets.append(parsed_tweet) 
                    else: 
                        tweets.append(parsed_tweet)
            return tweets               
        except tweepy.TweepError as e:
            print(str(e))
            
def main(): 
    # creating object of TwitterClient Class 

    
    api = TwitterClient() 
        # calling function to get tweets 
 
    tweets = []
    tweets = api.get_tweets(query = '#lucidcam', count = 200) 
    print(tweets)
    # picking positive tweets from tweets 
    ptweets = [tweet for tweet in tweets if tweet['sentiment'] == 'positive'] 
    # percentage of positive tweets 
    print("Positive tweets percentage: {} %".format(100*len(ptweets)/len(tweets))) 
    # picking negative tweets from tweets 
    ntweets = [tweet for tweet in tweets if tweet['sentiment'] == 'negative'] 
    # percentage of negative tweets 
    print("Negative tweets percentage: {} %".format(100*len(ntweets)/len(tweets))) 


if __name__ == "__main__": 
    main()          
    


# In[ ]:




